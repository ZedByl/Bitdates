services:
  postgres:
    image: postgres
    restart: always
    env_file:
      - ../backend/.env.prod
    ports:
      - "25432:5432"
    networks:
      - web
    volumes:
      - ../backend/db/data:/var/lib/postgresql/data

  backend:
    image: node:22.4.0
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - ../backend/.env.prod
    depends_on:
      - postgres
    networks:
      - web
    working_dir: /usr/src/app
    volumes:
      - ../backend:/usr/src/app
      - ../backend/.yarnrc.yml:/usr/src/app/.yarnrc.yml
      - ../backend/.yarn:/usr/src/app/.yarn
    command: bash -c "
      yarn install
      && yarn build
      && yarn start:prod"

  frontend:
    image: node:22.4.0
    restart: always
    depends_on:
      - backend
    networks:
      - web
    working_dir: /usr/src/app
    volumes:
      - ../frontend:/usr/src/app
      - ../frontend/.yarnrc.yml:/usr/src/app/.yarnrc.yml
      - ../frontend/.yarn:/usr/src/app/.yarn
      - frontend-build:/usr/src/app/build
    ports:
      - "5000:5000"
    command: bash -c "
      yarn install
      && yarn build
      && yarn dev --host 0.0.0.0"

  nginx:
    build: nginx
    depends_on:
      - frontend
      - backend
      - postgres
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-build:/usr/share/nginx/html
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


networks:
  web:

volumes:
  frontend-build:
