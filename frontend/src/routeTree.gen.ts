/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TermsIndexImport } from './routes/terms/index'
import { Route as PolicyIndexImport } from './routes/policy/index'
import { Route as FaqIndexImport } from './routes/faq/index'
import { Route as CreateIndexImport } from './routes/create/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as AuthAdminIndexImport } from './routes/auth/admin/index'
import { Route as EventsCategoryCategoryIdImport } from './routes/events/category/$categoryId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TermsIndexRoute = TermsIndexImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRoute,
} as any)

const PolicyIndexRoute = PolicyIndexImport.update({
  id: '/policy/',
  path: '/policy/',
  getParentRoute: () => rootRoute,
} as any)

const FaqIndexRoute = FaqIndexImport.update({
  id: '/faq/',
  path: '/faq/',
  getParentRoute: () => rootRoute,
} as any)

const CreateIndexRoute = CreateIndexImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const AuthAdminIndexRoute = AuthAdminIndexImport.update({
  id: '/auth/admin/',
  path: '/auth/admin/',
  getParentRoute: () => rootRoute,
} as any)

const EventsCategoryCategoryIdRoute = EventsCategoryCategoryIdImport.update({
  id: '/events/category/$categoryId',
  path: '/events/category/$categoryId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/create/': {
      id: '/create/'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateIndexImport
      parentRoute: typeof rootRoute
    }
    '/faq/': {
      id: '/faq/'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqIndexImport
      parentRoute: typeof rootRoute
    }
    '/policy/': {
      id: '/policy/'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof PolicyIndexImport
      parentRoute: typeof rootRoute
    }
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/category/$categoryId': {
      id: '/events/category/$categoryId'
      path: '/events/category/$categoryId'
      fullPath: '/events/category/$categoryId'
      preLoaderRoute: typeof EventsCategoryCategoryIdImport
      parentRoute: typeof rootRoute
    }
    '/auth/admin/': {
      id: '/auth/admin/'
      path: '/auth/admin'
      fullPath: '/auth/admin'
      preLoaderRoute: typeof AuthAdminIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/about': typeof AboutIndexRoute
  '/auth': typeof AuthIndexRoute
  '/create': typeof CreateIndexRoute
  '/faq': typeof FaqIndexRoute
  '/policy': typeof PolicyIndexRoute
  '/terms': typeof TermsIndexRoute
  '/events/category/$categoryId': typeof EventsCategoryCategoryIdRoute
  '/auth/admin': typeof AuthAdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/about': typeof AboutIndexRoute
  '/auth': typeof AuthIndexRoute
  '/create': typeof CreateIndexRoute
  '/faq': typeof FaqIndexRoute
  '/policy': typeof PolicyIndexRoute
  '/terms': typeof TermsIndexRoute
  '/events/category/$categoryId': typeof EventsCategoryCategoryIdRoute
  '/auth/admin': typeof AuthAdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/about/': typeof AboutIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/create/': typeof CreateIndexRoute
  '/faq/': typeof FaqIndexRoute
  '/policy/': typeof PolicyIndexRoute
  '/terms/': typeof TermsIndexRoute
  '/events/category/$categoryId': typeof EventsCategoryCategoryIdRoute
  '/auth/admin/': typeof AuthAdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/events/$eventId'
    | '/about'
    | '/auth'
    | '/create'
    | '/faq'
    | '/policy'
    | '/terms'
    | '/events/category/$categoryId'
    | '/auth/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/events/$eventId'
    | '/about'
    | '/auth'
    | '/create'
    | '/faq'
    | '/policy'
    | '/terms'
    | '/events/category/$categoryId'
    | '/auth/admin'
  id:
    | '__root__'
    | '/'
    | '/events/$eventId'
    | '/about/'
    | '/auth/'
    | '/create/'
    | '/faq/'
    | '/policy/'
    | '/terms/'
    | '/events/category/$categoryId'
    | '/auth/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  AboutIndexRoute: typeof AboutIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  CreateIndexRoute: typeof CreateIndexRoute
  FaqIndexRoute: typeof FaqIndexRoute
  PolicyIndexRoute: typeof PolicyIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
  EventsCategoryCategoryIdRoute: typeof EventsCategoryCategoryIdRoute
  AuthAdminIndexRoute: typeof AuthAdminIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  AboutIndexRoute: AboutIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  CreateIndexRoute: CreateIndexRoute,
  FaqIndexRoute: FaqIndexRoute,
  PolicyIndexRoute: PolicyIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
  EventsCategoryCategoryIdRoute: EventsCategoryCategoryIdRoute,
  AuthAdminIndexRoute: AuthAdminIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/events/$eventId",
        "/about/",
        "/auth/",
        "/create/",
        "/faq/",
        "/policy/",
        "/terms/",
        "/events/category/$categoryId",
        "/auth/admin/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/create/": {
      "filePath": "create/index.tsx"
    },
    "/faq/": {
      "filePath": "faq/index.tsx"
    },
    "/policy/": {
      "filePath": "policy/index.tsx"
    },
    "/terms/": {
      "filePath": "terms/index.tsx"
    },
    "/events/category/$categoryId": {
      "filePath": "events/category/$categoryId.tsx"
    },
    "/auth/admin/": {
      "filePath": "auth/admin/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
